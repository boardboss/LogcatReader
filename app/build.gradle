plugins {
  id 'com.android.application'
  id 'kotlin-android'
  id 'kotlin-parcelize'
  id 'kotlin-kapt'
  alias(libs.plugins.compose.compiler)
}

def fileProvider = "file_provider"

android {
  defaultConfig {
    applicationId "com.dp.logcatapp"
    compileSdk 35
    targetSdkVersion 34
    minSdkVersion 21
    versionCode 33
    versionName "1.7.2"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true
    multiDexEnabled true
  }

  buildFeatures {
    viewBinding true
    compose true
  }

  signingConfigs {
    release {
      try {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
        keyAlias keystoreProperties['keyAlias']
        keyPassword keystoreProperties['keyPassword']
        storeFile file(keystoreProperties['storeFile'])
        storePassword keystoreProperties['storePassword']
      } catch (FileNotFoundException ignored) {
        println("keystore file not found.")
      }
    }
  }

  lintOptions {
    abortOnError false
    disable 'MissingTranslation'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_17
  }

  buildTypes {
    buildTypes.each {
      it.buildConfigField("String", "FILE_PROVIDER", "\"$fileProvider\"")
      it.addManifestPlaceholders(["fileProvider": fileProvider])
    }
    release {
      signingConfig signingConfigs.release
      minifyEnabled false
      shrinkResources false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  namespace 'com.dp.logcatapp'
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation project(':collections')
  implementation project(':logcat')
  implementation project(':logger')
  implementation libs.kotlin.stdlib.jdk7
  implementation libs.kotlin.reflect
  implementation libs.core.ktx
  implementation libs.fragment.ktx
  implementation libs.appcompat
  implementation libs.material
  implementation libs.preference.ktx
  implementation libs.legacy.preference.v14
  implementation libs.lifecycle.common.java8
  implementation libs.lifecycle.extensions
  implementation libs.lifecycle.viewmodel.ktx
  implementation libs.lifecycle.service
  implementation libs.lifecycle.runtime.ktx
  implementation libs.kotlinx.coroutines.core
  implementation libs.constraintlayout
  implementation libs.room.runtime
  implementation libs.documentfile
  implementation libs.kotlinx.coroutines.android
  implementation libs.multidex
  kapt libs.room.compiler

  // Compose
  def composeBom = platform(libs.compose.bom)
  implementation composeBom
  androidTestImplementation composeBom
  // Material Design 3
  implementation 'androidx.compose.material3:material3'

  // Android Studio Preview support
  implementation 'androidx.compose.ui:ui-tooling-preview'
  debugImplementation 'androidx.compose.ui:ui-tooling'

  // UI Tests
  androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
  debugImplementation 'androidx.compose.ui:ui-test-manifest'

  // Optional - Included automatically by material, only add when you need
  // the icons but not the material library (e.g. when using Material3 or a
  // custom design system based on Foundation)
  implementation 'androidx.compose.material:material-icons-core'
  // Optional - Add full set of material icons
  implementation 'androidx.compose.material:material-icons-extended'
  // Optional - Add window size utils
  implementation 'androidx.compose.material3.adaptive:adaptive'

  // Optional - Integration with activities
  implementation 'androidx.activity:activity-compose:1.9.2'
  // Optional - Integration with ViewModels
  implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.8.5'

  testImplementation libs.junit
  androidTestImplementation libs.runner
  androidTestImplementation libs.espresso.core
}
